// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package database

import (
	"context"
)

const addTagToBook = `-- name: AddTagToBook :one
INSERT INTO book_tags (book_id, tag_id)
VALUES (?, ?)
RETURNING book_id, tag_id
`

type AddTagToBookParams struct {
	BookID string
	TagID  string
}

// Books to Tags many-to-many relationship queries
func (q *Queries) AddTagToBook(ctx context.Context, arg AddTagToBookParams) (BookTag, error) {
	row := q.db.QueryRowContext(ctx, addTagToBook, arg.BookID, arg.TagID)
	var i BookTag
	err := row.Scan(&i.BookID, &i.TagID)
	return i, err
}

const clearBookTags = `-- name: ClearBookTags :exec
DELETE FROM book_tags
`

func (q *Queries) ClearBookTags(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearBookTags)
	return err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (id, name)
VALUES (?, ?)
RETURNING id, name
`

type CreateTagParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.ID, arg.Name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTags = `-- name: DeleteTags :exec
DELETE FROM tags
`

func (q *Queries) DeleteTags(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteTags)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name FROM tags WHERE name = ?
`

func (q *Queries) GetTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listBooksForTag = `-- name: ListBooksForTag :many
SELECT b.id, b.title, b.isbn, b.publication_date, b.number_of_pages
FROM books b
JOIN book_tags bt ON b.id = bt.book_id
WHERE bt.tag_id = ?
`

func (q *Queries) ListBooksForTag(ctx context.Context, tagID string) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooksForTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Isbn,
			&i.PublicationDate,
			&i.NumberOfPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, name FROM tags
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsForBook = `-- name: ListTagsForBook :many
SELECT t.name
FROM tags t
JOIN book_tags bt ON t.id = bt.tag_id
WHERE bt.book_id = ?
`

func (q *Queries) ListTagsForBook(ctx context.Context, bookID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listTagsForBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllBooksFromTag = `-- name: RemoveAllBooksFromTag :exec
DELETE FROM book_tags
WHERE tag_id = ?
`

func (q *Queries) RemoveAllBooksFromTag(ctx context.Context, tagID string) error {
	_, err := q.db.ExecContext(ctx, removeAllBooksFromTag, tagID)
	return err
}

const removeAllTagsFromBook = `-- name: RemoveAllTagsFromBook :exec
DELETE FROM book_tags
WHERE book_id = ?
`

func (q *Queries) RemoveAllTagsFromBook(ctx context.Context, bookID string) error {
	_, err := q.db.ExecContext(ctx, removeAllTagsFromBook, bookID)
	return err
}

const removeTagFromBook = `-- name: RemoveTagFromBook :exec
DELETE FROM book_tags
WHERE book_id = ? AND tag_id = ?
`

type RemoveTagFromBookParams struct {
	BookID string
	TagID  string
}

func (q *Queries) RemoveTagFromBook(ctx context.Context, arg RemoveTagFromBookParams) error {
	_, err := q.db.ExecContext(ctx, removeTagFromBook, arg.BookID, arg.TagID)
	return err
}

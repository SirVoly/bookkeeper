// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package database

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (id, title, isbn, publication_date, number_of_pages)
VALUES (?, ?, ?, ?, ?)
RETURNING id, title, isbn, publication_date, number_of_pages
`

type CreateBookParams struct {
	ID              string
	Title           string
	Isbn            int64
	PublicationDate sql.NullString
	NumberOfPages   sql.NullInt64
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.ID,
		arg.Title,
		arg.Isbn,
		arg.PublicationDate,
		arg.NumberOfPages,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Isbn,
		&i.PublicationDate,
		&i.NumberOfPages,
	)
	return i, err
}

const deleteBooks = `-- name: DeleteBooks :exec
DELETE FROM books
`

func (q *Queries) DeleteBooks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteBooks)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, title, isbn, publication_date, number_of_pages FROM books WHERE title = ?
`

func (q *Queries) GetBook(ctx context.Context, title string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, title)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Isbn,
		&i.PublicationDate,
		&i.NumberOfPages,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, isbn, publication_date, number_of_pages FROM books
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Isbn,
			&i.PublicationDate,
			&i.NumberOfPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
